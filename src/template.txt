extern crate advent_of_code;

#[allow(unused_imports)]
use advent_of_code::*;
use fancy_regex::Regex;
use itertools::Itertools;
use pathfinding::directed::bfs::bfs;
use std::collections::{HashMap, HashSet, VecDeque};

advent_of_code::solution!(%DAY_NUMBER%);

pub fn part_one(input: &str) -> Option<usize> {
    None
}

pub fn part_two(input: &str) -> Option<usize> {
    None
}

fn parse(input: &str) -> Vec<usize> {
    parser!(lines(usize)).parse(input).expect("Failed to parse")
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_part_one() {
        let result = part_one(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, None);
    }

    #[test]
    fn test_part_two() {
        let result = part_two(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, None);
    }
}
